package kevin.module.modules.exploit

import kevin.event.EventTarget
import kevin.event.PacketEvent
import kevin.event.UpdateEvent
import kevin.module.IntegerValue
import kevin.module.Module
import kevin.module.ModuleCategory
import kevin.utils.PacketUtils
import kevin.utils.TimeUtils
import net.minecraft.network.Packet
import net.minecraft.network.play.client.CPacketClientStatus
import net.minecraft.network.play.client.CPacketKeepAlive

class PingSpoof : Module("PingSpoof", "Spoofs your ping to a given value.", category = ModuleCategory.EXPLOIT) {
    private val minDelayValue: IntegerValue = object : IntegerValue("MinDelay", 500, 0, 114514) {
        override fun onChanged(oldValue: Int, newValue: Int) {
            val maxDelayValue = maxDelayValue.get()

            if (maxDelayValue < newValue)
                set(maxDelayValue)
        }
    }

    private val maxDelayValue: IntegerValue = object : IntegerValue("MaxDelay", 1000, 0, 114514) {
        override fun onChanged(oldValue: Int, newValue: Int) {
            val minDelayValue = minDelayValue.get()

            if (minDelayValue > newValue)
                set(minDelayValue)
        }
    }

    private val packetQueue = hashMapOf<Packet<*>, Long>()

    override fun onDisable() {
        packetQueue.clear()
    }

    @EventTarget
    fun onPacket(event: PacketEvent) {
        val packet = event.packet

        if (((packet)is CPacketKeepAlive || (packet)is CPacketClientStatus)
            && !(mc.player!!.isDead || mc.player!!.health <= 0) && !packetQueue.containsKey(packet)) {
            event.cancelEvent()

            synchronized(packetQueue) {
                packetQueue[packet] = System.currentTimeMillis() + TimeUtils.randomDelay(minDelayValue.get(), maxDelayValue.get())
            }
        }
    }

    @EventTarget
    fun onUpdate(event: UpdateEvent) {
        synchronized(packetQueue) {
            packetQueue.filter {
                it.value >= System.currentTimeMillis()
            }.forEach { (packet, time) ->
                //mc.connection!!.sendPacket(packet)
                PacketUtils.sendPacketNoEvent(packet)
                packetQueue.remove(packet, time)
            }
        }
    }
}